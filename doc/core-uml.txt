@startuml core-class.png

class Host {
  + GlobalEndPoint : EndPoint
  + LocalEndPoint : EndPoint
  + SessionID : Guid
  + BroadcastID : Guid
  + IsFirewalled : bool
  + RelayCount : bool
  + DirectCount : bool
  + IsRelayFull : bool
  + IsDirectFull : bool
  + IsReceiving : bool
  + Extensions : string[]
  + Extra : AtomCollection
}

class PeerCast {
  + AgentName : string
  + YellowPages : IYellowPage[]
  + YellowPageFactories : IYellowPageFactory[]
  + SourceStreamFactories : ISourceStreamFactory[]
  + OutputStreamFactories : IOutputStreamFactory[]
  + Channels : Channel[]
  + IsClosed : bool
  + AccessController : AccessController

  + IsFirewalled   : bool
  + SessionID      : Guid
  + BroadcastID    : Guid
  + LocalAddress   : IPAddress
  + LocalAddress6  : IPAddress
  + GlobalAddress  : IPAddress
  + GlobalAddress6 : IPAddress

  + OutputListeners : OutputListener[]

  + StartListen(ip : IPEndPoint) : OutputListener
  + StopListen(listener : OutputListener)

  + LocalEndPoint() : IPEndPoint
  + LocalEndPoint6() : IPEndPoint
  + GlobalEndPoint() : IPEndPoint
  + GlobalEndPoint6() : IPEndPoint
  + RelayChannel(channel_id : Guid) : Channel
  + RelayChannel(channel_id : Guid, tracker : Uri) : Channel
  + RequestChannel(channel_id : Guid, tracker : Uri, request_relay : bool)
  + BroadcastChannel(yp : IYellowPage, channel_id : Guid, protocol : string, source : URI) : Channel

  + CloseChannel(channel : Channel)
  + PeerCast()
  + Close()
}
PeerCast o-- "*" Channel
PeerCast o-- "*" IYellowPage
PeerCast o-- "*" ISourceStreamFactory
PeerCast o-- "*" IOutputStreamFactory
PeerCast o-- "*" IYellowPageFactory

interface IYellowPageFactory {
  + Name : string
  + Create(name : string, uri : URI) : IYelloPage
}

interface IYellowPage {
  + Name : string
  + Uri : Uri
  + FindTracker(channel_id : Guid) : Uri
  + ListChannels() : ChannelInfo[]
  + Announce(channel : Channel)
}

class ChannelInfo {
  + ChannelID        : Guid
  + Tracker          : Uri
  + Name             : string
  + ContentType      : string
  + MIMEType         : string
  + ContentExtension : string
  + Extra            : AtomCollection
}

class Channel {
  + PeerCast : PeerCast
  + Status : SourceStreamStatus
  + IsClosed : bool
  + SourceUri : Uri
  + SourceHost : Host
  + SourceStream : ISourceStream
  + OutputStreams : OutputStreamCollection
  + Nodes : Host[]
  + ChannelInfo : ChannelInfo
  + ContentHeader : Content
  + Contents : ContentCollection
  + IsRelayFull() : bool
  + IsDirectFull() : bool
  + Uptime() : TimeSpan
  + IgnoreHost(host : Host)
  + ClearIgnored()
  + SelectSourceHost() : Host
  + SelectSourceNodes() : Host[]
  + Start(source_stream : ISourceStream)
  + Reconnect()
  + Broadcast(from : Host, packet : Atom, group : BroadcastGroup)
  + Close()
  + Channel(peercast : PeerCast, channel_id : Guid, source_uri : Uri)
}
Channel o-- "*" IOutputStream
Channel o-- ISourceStream
Channel *-- ChannelInfo
Channel *-- "*" Host
Channel *-- ContentCollection

class ContentCollection {
  + LimitPackets : int
  + Count : int
  + IsReadOnly : int
}
ContentCollection *-- "*" Content

class Content {
  + Position : long
  + Data : byte[]
}

interface IOutputStreamFactory {
  + Name : string
  + Create(stream : Stream, remote_endpoint : EndPoint, channel_id : Guid, header : byte[]) : IOutputStream
  + ParseChannelID(header : byte[]) : Guid
}

interface IOutputStream {
  + OutputStreamType : OutputStreamType
  + IsLocal : bool
  + UpstreamRate : int
  + Start()
  + Close()
  + Post(from : Host, packet : Atom)
}

interface ISourceStreamFactory {
  + Name : string
  + Create(channel : Channel, tracker : Uri) : ISourceStream
}

interface ISourceStream {
  + Status : SourceStreamStatus
  + StatusChanged : EventHandler<SourceStreamStatusChangedEventArgs>
  + Start()
  + Reconnect()
  + Close()
  + Post(from : Host, packet : Atom)
}

@enduml

@startuml core-sequence-plugins.png
title プラグイン登録の流れ
loop 読み込むプラグイン
  UI -> PeerCast : loadPlugIn(uri)
  loop 全PlugInLoaderについて
    PeerCast -> PlugInLoader : load(uri)
    alt 読み込めた
      create PlugIn
      PlugInLoader -> PlugIn : new(PeerCast)
      PlugIn -> PeerCast : registerSourceStreamFactory
      PlugIn -> PeerCast : registerOutputStreamFactory
      PlugIn -> PeerCast : registerYellowPageFactory
      PlugIn -> PeerCast : addPlugInLoader
      PeerCast <-- PlugInLoader : PlugIn
    else 読み込めなかった
      PeerCast <-- PlugInLoader : NULL
    end
  end
end
@enduml

@startuml core-sequence-relay.png
title リレーの流れ
UI   ->  PeerCast : relayChannel(channel_id)
PeerCast ->  YellowPage : findTracker(channel_id)
activate YellowPage
PeerCast <-- YellowPage : tracker : Host, protocol
deactivate YellowPage
create SourceStream
PeerCast ->  SourceStream : new(protocol)
create Channel
PeerCast -> Channel : new
PeerCast ->  SourceStream : start(tracker, Channel)
UI <-- PeerCast : channel : Channel
SourceStream -> Channel : setChannelInfo
SourceStream -> Channel : addNode
loop 切れるまで
  SourceStream -> Channel : addContent
  OutputStream -> Channel : getContent
  OutputStream <-- Channel : content
end

@enduml

@startuml core-sequence-output.png
title クライアントがつないできてコンテントストリームをもらう流れ
クライアント -> 出力待ち受けスレッド : connect
activate 出力待ち受けスレッド
create OutputStreamSelector
出力待ち受けスレッド -> OutputStreamSelector : new(socket)
deactivate 出力待ち受けスレッド
activate OutputStreamSelector
クライアント <-- 出力待ち受けスレッド : OutputStreamSelector(socket)
クライアント -> OutputStreamSelector : リクエスト
create OutputStream
OutputStreamSelector -> OutputStream : new(protocol)
OutputStreamSelector -> OutputStream : start(channel_id, socket)
deactivate OutputStreamSelector
OutputStream -> PeerCast : getChannel(channel_id)
OutputStream <-- PeerCast : Channel
OutputStream -> Channel : addOutputStream()
loop 切れるまで
  OutputStream -> Channel : getContent()
  OutputStream <-- Channel : content
  クライアント <-- OutputStream : content
end
@enduml

